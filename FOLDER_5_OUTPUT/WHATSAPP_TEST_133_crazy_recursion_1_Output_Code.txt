.data
string_access_violation: .asciiz "Access Violation"
string_illegal_div_by_0: .asciiz "Division By Zero"
string_invalid_ptr_dref: .asciiz "Invalid Pointer Dereference"
Label_2_StringLiteral: .asciiz "odds"
Label_5_StringLiteral: .asciiz "main"
.text
main:
	j __main__
	# Begin error handlers:
access_violation:
	li $v0, 4
	la $a0, string_access_violation
	syscall
	li $v0,10
	syscall
invalid_pointer:
	li $v0, 4
	la $a0, string_invalid_ptr_dref
	syscall
	li $v0,10
	syscall
Label_0_Func_odds:
	la $t0, Label_2_StringLiteral
	addi $sp, $sp, -8
	sw $ra, 4($sp)
	sw $fp, 0($sp)
	move $fp, $sp
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
Label_9_prolog_end_odds:
	# func prolog end
	lw $t0, 4($a0)
	li $t1,0
	beq $t0,$t1,Label_11_AssignOne
	bne $t0,$t1,Label_12_AssignZero
Label_11_AssignOne:
	li $t0, 1
	j Label_10_end
Label_12_AssignZero:
	li $t0, 0
Label_10_end:
	beq $t0,$zero,Label_3_if_statement_end
	j Label_1_Func_odds_end
Label_3_if_statement_end:
	li $t0,0
	sw $t0, -8($fp)
	lw $t1, 0($a0)
	lw $t2, 4($a0)
	li $t3,1
	sub $t0,$t2,$t3
	li $t2,32767
	li $t3,-32768
	blt $t2,$t0,Label_14_overflow_max
	bgt $t3,$t0,Label_15_overflow_min
	j Label_13_end
Label_14_overflow_max:
	li $t0,32767
	j Label_13_end
Label_15_overflow_min:
	li $t0,-32768
Label_13_end:
	beq $t1,$zero,invalid_pointer
	lw $t2, 0($t1)
	bge $t0,$t2,access_violation
	blt $t0,$zero,access_violation
	addi $t2,$t0,1
	li $t0,4
	mult $t2,$t0
	mflo $t2
	add $t2,$t1,$t2
	lw $t0, 0($t2)
	lw $t1, 0($a0)
	lw $t3, 4($a0)
	li $t4,1
	sub $t2,$t3,$t4
	li $t3,32767
	li $t4,-32768
	blt $t3,$t2,Label_17_overflow_max
	bgt $t4,$t2,Label_18_overflow_min
	j Label_16_end
Label_17_overflow_max:
	li $t2,32767
	j Label_16_end
Label_18_overflow_min:
	li $t2,-32768
Label_16_end:
	beq $t1,$zero,invalid_pointer
	lw $t3, 0($t1)
	bge $t2,$t3,access_violation
	blt $t2,$zero,access_violation
	addi $t3,$t2,1
	li $t2,4
	mult $t3,$t2
	mflo $t3
	add $t3,$t1,$t3
	lw $t2, 0($t3)
	li $t3,2
	bnez $t3,Label_22_div_by_zero_not
	li $v0, 4
	la $a0, string_illegal_div_by_0
	syscall
	li $v0,10
	syscall
Label_22_div_by_zero_not:
	div $t1,$t2,$t3
	mflo $t1
	li $t2,32767
	li $t3,-32768
	blt $t2,$t1,Label_20_overflow_max
	bgt $t3,$t1,Label_21_overflow_min
	j Label_19_end
Label_20_overflow_max:
	li $t1,32767
	j Label_19_end
Label_21_overflow_min:
	li $t1,-32768
Label_19_end:
	li $t2,2
	mult $t1,$t2
	mflo $t1
	li $t2,32767
	li $t3,-32768
	blt $t2,$t1,Label_24_overflow_max
	bgt $t3,$t1,Label_25_overflow_min
	j Label_23_end
Label_24_overflow_max:
	li $t1,32767
	j Label_23_end
Label_25_overflow_min:
	li $t1,-32768
Label_23_end:
	beq $t0,$t1,Label_27_AssignOne
	bne $t0,$t1,Label_28_AssignZero
Label_27_AssignOne:
	li $t0, 1
	j Label_26_end
Label_28_AssignZero:
	li $t0, 0
Label_26_end:
	beq $t0,$zero,Label_4_if_statement_end
	lw $t0, 0($a0)
	lw $t2, 4($a0)
	li $t3,1
	sub $t1,$t2,$t3
	li $t2,32767
	li $t3,-32768
	blt $t2,$t1,Label_30_overflow_max
	bgt $t3,$t1,Label_31_overflow_min
	j Label_29_end
Label_30_overflow_max:
	li $t1,32767
	j Label_29_end
Label_31_overflow_min:
	li $t1,-32768
Label_29_end:
	li $t2,0
	lw $t3, 0($t0)
	bge $t1,$t3,access_violation
	blt $t1,$zero,access_violation
	addi $t3,$t1,1
	li $t1,4
	mult $t3,$t1
	mflo $t3
	add $t3,$t0,$t3
	sw $t2, 0($t3)
Label_4_if_statement_end:
	addi $sp, $sp, -40
	sw $t0, 0($sp)
	sw $t1, 4($sp)
	sw $t2, 8($sp)
	sw $t3, 12($sp)
	sw $t4, 16($sp)
	sw $t5, 20($sp)
	sw $t6, 24($sp)
	sw $t7, 28($sp)
	sw $a0, 32($sp)
	sw $a1, 36($sp)
	# Allocating stack for arguments
	addi $sp, $sp, -8
	move $a2, $sp
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	lw $t0, 0($a0)
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	sw $t0, 0($a2)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	lw $t1, 4($a0)
	li $t2,1
	sub $t0,$t1,$t2
	li $t1,32767
	li $t2,-32768
	blt $t1,$t0,Label_33_overflow_max
	bgt $t2,$t0,Label_34_overflow_min
	j Label_32_end
Label_33_overflow_max:
	li $t0,32767
	j Label_32_end
Label_34_overflow_min:
	li $t0,-32768
Label_32_end:
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	sw $t0, 4($a2)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	move $a0,$a2
	jal Label_0_Func_odds
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	# Deallocating stack for arguments
	addi $sp, $sp, 8
	lw $t0, 0($sp)
	lw $t1, 4($sp)
	lw $t2, 8($sp)
	lw $t3, 12($sp)
	lw $t4, 16($sp)
	lw $t5, 20($sp)
	lw $t6, 24($sp)
	lw $t7, 28($sp)
	lw $a0, 32($sp)
	lw $a1, 36($sp)
	addi $sp, $sp, 40
	move $t0, $v0
Label_1_Func_odds_end:
	addi $sp, $sp, 8
	lw	$fp, ($sp)
	lw	$ra, 4($sp)
	addi $sp, $sp, 8
	jr $ra
__main__:
	la $t0, Label_5_StringLiteral
	addi $sp, $sp, -8
	sw $ra, 4($sp)
	sub $fp, $fp, $fp
	sw $fp, 0($sp)
	move $fp, $sp
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -8
Label_35_prolog_end_main:
	# func prolog end
	li $t1,5
	# Begin array allocation
	addi $t0,$t1,1
	li $t2,4
	mult $t0,$t2
	mflo $t0
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $a0, $t0, 0
	li $v0, 9
	syscall
	addi $t0, $v0, 0
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	sw $t1, 0($t0)
	# end array allocation
	sw $t0, -8($fp)
	lw $t0, -8($fp)
	li $t1,0
	li $t2,2
	lw $t3, 0($t0)
	bge $t1,$t3,access_violation
	blt $t1,$zero,access_violation
	addi $t3,$t1,1
	li $t1,4
	mult $t3,$t1
	mflo $t3
	add $t3,$t0,$t3
	sw $t2, 0($t3)
	lw $t0, -8($fp)
	li $t1,1
	li $t2,5
	lw $t3, 0($t0)
	bge $t1,$t3,access_violation
	blt $t1,$zero,access_violation
	addi $t3,$t1,1
	li $t1,4
	mult $t3,$t1
	mflo $t3
	add $t3,$t0,$t3
	sw $t2, 0($t3)
	lw $t0, -8($fp)
	li $t1,2
	li $t2,8
	lw $t3, 0($t0)
	bge $t1,$t3,access_violation
	blt $t1,$zero,access_violation
	addi $t3,$t1,1
	li $t1,4
	mult $t3,$t1
	mflo $t3
	add $t3,$t0,$t3
	sw $t2, 0($t3)
	lw $t0, -8($fp)
	li $t1,3
	li $t2,11
	lw $t3, 0($t0)
	bge $t1,$t3,access_violation
	blt $t1,$zero,access_violation
	addi $t3,$t1,1
	li $t1,4
	mult $t3,$t1
	mflo $t3
	add $t3,$t0,$t3
	sw $t2, 0($t3)
	lw $t0, -8($fp)
	li $t1,4
	li $t2,14
	lw $t3, 0($t0)
	bge $t1,$t3,access_violation
	blt $t1,$zero,access_violation
	addi $t3,$t1,1
	li $t1,4
	mult $t3,$t1
	mflo $t3
	add $t3,$t0,$t3
	sw $t2, 0($t3)
	addi $sp, $sp, -40
	sw $t0, 0($sp)
	sw $t1, 4($sp)
	sw $t2, 8($sp)
	sw $t3, 12($sp)
	sw $t4, 16($sp)
	sw $t5, 20($sp)
	sw $t6, 24($sp)
	sw $t7, 28($sp)
	sw $a0, 32($sp)
	sw $a1, 36($sp)
	# Allocating stack for arguments
	addi $sp, $sp, -8
	move $a2, $sp
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	lw $t0, -8($fp)
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	sw $t0, 0($a2)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	li $t0,5
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	sw $t0, 4($a2)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	move $a0,$a2
	jal Label_0_Func_odds
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	# Deallocating stack for arguments
	addi $sp, $sp, 8
	lw $t0, 0($sp)
	lw $t1, 4($sp)
	lw $t2, 8($sp)
	lw $t3, 12($sp)
	lw $t4, 16($sp)
	lw $t5, 20($sp)
	lw $t6, 24($sp)
	lw $t7, 28($sp)
	lw $a0, 32($sp)
	lw $a1, 36($sp)
	addi $sp, $sp, 40
	move $t0, $v0
	li $t0,0
	sw $t0, -12($fp)
Label_8_while_statement_start:
	lw $t0, -12($fp)
	li $t1,5
	blt $t0,$t1,Label_37_AssignOne
	bge $t0,$t1,Label_38_AssignZero
Label_37_AssignOne:
	li $t0, 1
	j Label_36_end
Label_38_AssignZero:
	li $t0, 0
Label_36_end:
	beq $t0,$zero,Label_7_while_statement_end
	addi $sp, $sp, -40
	sw $t0, 0($sp)
	sw $t1, 4($sp)
	sw $t2, 8($sp)
	sw $t3, 12($sp)
	sw $t4, 16($sp)
	sw $t5, 20($sp)
	sw $t6, 24($sp)
	sw $t7, 28($sp)
	sw $a0, 32($sp)
	sw $a1, 36($sp)
	# Allocating stack for arguments
	addi $sp, $sp, -4
	move $a2, $sp
	lw $t1, -8($fp)
	lw $t0, -12($fp)
	beq $t1,$zero,invalid_pointer
	lw $t2, 0($t1)
	bge $t0,$t2,access_violation
	blt $t0,$zero,access_violation
	addi $t2,$t0,1
	li $t0,4
	mult $t2,$t0
	mflo $t2
	add $t2,$t1,$t2
	lw $t0, 0($t2)
	move $a0,$t0
	li $v0,1
	syscall
	li $a0,32
	li $v0,11
	syscall
	# Deallocating stack for arguments
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	lw $t1, 4($sp)
	lw $t2, 8($sp)
	lw $t3, 12($sp)
	lw $t4, 16($sp)
	lw $t5, 20($sp)
	lw $t6, 24($sp)
	lw $t7, 28($sp)
	lw $a0, 32($sp)
	lw $a1, 36($sp)
	addi $sp, $sp, 40
	move $t0, $v0
	lw $t1, -12($fp)
	li $t2,1
	add $t0,$t1,$t2
	li $t1,32767
	li $t2,-32768
	blt $t1,$t0,Label_40_overflow_max
	bgt $t2,$t0,Label_41_overflow_min
	j Label_39_end
Label_40_overflow_max:
	li $t0,32767
	j Label_39_end
Label_41_overflow_min:
	li $t0,-32768
Label_39_end:
	sw $t0, -12($fp)
	j Label_8_while_statement_start
Label_7_while_statement_end:
Label_6_Func_main_end:
	addi $sp, $sp, 12
	lw	$fp, ($sp)
	lw	$ra, 4($sp)
	addi $sp, $sp, 8
	li $v0,10
	syscall
