.data
string_access_violation: .asciiz "Access Violation"
string_illegal_div_by_0: .asciiz "Division By Zero"
string_invalid_ptr_dref: .asciiz "Invalid Pointer Dereference"
Label_0_StringLiteral: .asciiz "main"
.text
main:
	j __main__
	# Begin error handlers:
access_violation:
	li $v0, 4
	la $a0, string_access_violation
	syscall
	li $v0,10
	syscall
invalid_pointer:
	li $v0, 4
	la $a0, string_invalid_ptr_dref
	syscall
	li $v0,10
	syscall
__main__:
	la $t0, Label_0_StringLiteral
	addi $sp, $sp, -8
	sw $ra, 4($sp)
	sub $fp, $fp, $fp
	sw $fp, 0($sp)
	move $fp, $sp
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -12
Label_2_prolog_end_main:
	# func prolog end
	li $t1,3
	# Begin array allocation
	addi $t0,$t1,1
	li $t2,4
	mult $t0,$t2
	mflo $t0
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $a0, $t0, 0
	li $v0, 9
	syscall
	addi $t0, $v0, 0
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	sw $t1, 0($t0)
	# end array allocation
	sw $t0, -8($fp)
	lw $t0, -8($fp)
	sw $t0, -12($fp)
	li $t1,1
	# Begin array allocation
	addi $t0,$t1,1
	li $t2,4
	mult $t0,$t2
	mflo $t0
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $a0, $t0, 0
	li $v0, 9
	syscall
	addi $t0, $v0, 0
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	sw $t1, 0($t0)
	# end array allocation
	sw $t0, -16($fp)
	lw $t0, -8($fp)
	li $t1,0
	li $t2,5
	lw $t3, 0($t0)
	bge $t1,$t3,access_violation
	blt $t1,$zero,access_violation
	addi $t3,$t1,1
	li $t1,4
	mult $t3,$t1
	mflo $t3
	add $t3,$t0,$t3
	sw $t2, 0($t3)
	lw $t0, -8($fp)
	li $t1,1
	li $t2,25
	lw $t3, 0($t0)
	bge $t1,$t3,access_violation
	blt $t1,$zero,access_violation
	addi $t3,$t1,1
	li $t1,4
	mult $t3,$t1
	mflo $t3
	add $t3,$t0,$t3
	sw $t2, 0($t3)
	lw $t0, -8($fp)
	li $t1,2
	li $t2,125
	lw $t3, 0($t0)
	bge $t1,$t3,access_violation
	blt $t1,$zero,access_violation
	addi $t3,$t1,1
	li $t1,4
	mult $t3,$t1
	mflo $t3
	add $t3,$t0,$t3
	sw $t2, 0($t3)
	lw $t0, -12($fp)
	li $t1,0
	li $t2,2
	lw $t3, 0($t0)
	bge $t1,$t3,access_violation
	blt $t1,$zero,access_violation
	addi $t3,$t1,1
	li $t1,4
	mult $t3,$t1
	mflo $t3
	add $t3,$t0,$t3
	sw $t2, 0($t3)
	lw $t0, -12($fp)
	li $t1,1
	li $t2,4
	lw $t3, 0($t0)
	bge $t1,$t3,access_violation
	blt $t1,$zero,access_violation
	addi $t3,$t1,1
	li $t1,4
	mult $t3,$t1
	mflo $t3
	add $t3,$t0,$t3
	sw $t2, 0($t3)
	lw $t0, -12($fp)
	li $t1,3
	li $t2,8
	lw $t3, 0($t0)
	bge $t1,$t3,access_violation
	blt $t1,$zero,access_violation
	addi $t3,$t1,1
	li $t1,4
	mult $t3,$t1
	mflo $t3
	add $t3,$t0,$t3
	sw $t2, 0($t3)
	addi $sp, $sp, -40
	sw $t0, 0($sp)
	sw $t1, 4($sp)
	sw $t2, 8($sp)
	sw $t3, 12($sp)
	sw $t4, 16($sp)
	sw $t5, 20($sp)
	sw $t6, 24($sp)
	sw $t7, 28($sp)
	sw $a0, 32($sp)
	sw $a1, 36($sp)
	# Allocating stack for arguments
	addi $sp, $sp, -4
	move $a2, $sp
	lw $t1, -8($fp)
	li $t0,0
	beq $t1,$zero,invalid_pointer
	lw $t2, 0($t1)
	bge $t0,$t2,access_violation
	blt $t0,$zero,access_violation
	addi $t2,$t0,1
	li $t0,4
	mult $t2,$t0
	mflo $t2
	add $t2,$t1,$t2
	lw $t0, 0($t2)
	move $a0,$t0
	li $v0,1
	syscall
	li $a0,32
	li $v0,11
	syscall
	# Deallocating stack for arguments
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	lw $t1, 4($sp)
	lw $t2, 8($sp)
	lw $t3, 12($sp)
	lw $t4, 16($sp)
	lw $t5, 20($sp)
	lw $t6, 24($sp)
	lw $t7, 28($sp)
	lw $a0, 32($sp)
	lw $a1, 36($sp)
	addi $sp, $sp, 40
	move $t0, $v0
	addi $sp, $sp, -40
	sw $t0, 0($sp)
	sw $t1, 4($sp)
	sw $t2, 8($sp)
	sw $t3, 12($sp)
	sw $t4, 16($sp)
	sw $t5, 20($sp)
	sw $t6, 24($sp)
	sw $t7, 28($sp)
	sw $a0, 32($sp)
	sw $a1, 36($sp)
	# Allocating stack for arguments
	addi $sp, $sp, -4
	move $a2, $sp
	lw $t1, -8($fp)
	li $t0,1
	beq $t1,$zero,invalid_pointer
	lw $t2, 0($t1)
	bge $t0,$t2,access_violation
	blt $t0,$zero,access_violation
	addi $t2,$t0,1
	li $t0,4
	mult $t2,$t0
	mflo $t2
	add $t2,$t1,$t2
	lw $t0, 0($t2)
	move $a0,$t0
	li $v0,1
	syscall
	li $a0,32
	li $v0,11
	syscall
	# Deallocating stack for arguments
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	lw $t1, 4($sp)
	lw $t2, 8($sp)
	lw $t3, 12($sp)
	lw $t4, 16($sp)
	lw $t5, 20($sp)
	lw $t6, 24($sp)
	lw $t7, 28($sp)
	lw $a0, 32($sp)
	lw $a1, 36($sp)
	addi $sp, $sp, 40
	move $t0, $v0
	addi $sp, $sp, -40
	sw $t0, 0($sp)
	sw $t1, 4($sp)
	sw $t2, 8($sp)
	sw $t3, 12($sp)
	sw $t4, 16($sp)
	sw $t5, 20($sp)
	sw $t6, 24($sp)
	sw $t7, 28($sp)
	sw $a0, 32($sp)
	sw $a1, 36($sp)
	# Allocating stack for arguments
	addi $sp, $sp, -4
	move $a2, $sp
	lw $t1, -8($fp)
	li $t0,2
	beq $t1,$zero,invalid_pointer
	lw $t2, 0($t1)
	bge $t0,$t2,access_violation
	blt $t0,$zero,access_violation
	addi $t2,$t0,1
	li $t0,4
	mult $t2,$t0
	mflo $t2
	add $t2,$t1,$t2
	lw $t0, 0($t2)
	move $a0,$t0
	li $v0,1
	syscall
	li $a0,32
	li $v0,11
	syscall
	# Deallocating stack for arguments
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	lw $t1, 4($sp)
	lw $t2, 8($sp)
	lw $t3, 12($sp)
	lw $t4, 16($sp)
	lw $t5, 20($sp)
	lw $t6, 24($sp)
	lw $t7, 28($sp)
	lw $a0, 32($sp)
	lw $a1, 36($sp)
	addi $sp, $sp, 40
	move $t0, $v0
	lw $t0, -12($fp)
	li $t1,3
	li $t2,6
	lw $t3, 0($t0)
	bge $t1,$t3,access_violation
	blt $t1,$zero,access_violation
	addi $t3,$t1,1
	li $t1,4
	mult $t3,$t1
	mflo $t3
	add $t3,$t0,$t3
	sw $t2, 0($t3)
Label_1_Func_main_end:
	addi $sp, $sp, 16
	lw	$fp, ($sp)
	lw	$ra, 4($sp)
	addi $sp, $sp, 8
	li $v0,10
	syscall
